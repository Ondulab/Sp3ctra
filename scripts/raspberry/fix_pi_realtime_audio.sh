#!/bin/bash
# fix_pi_realtime_audio.sh
# Script de configuration automatique pour r√©soudre la latence audio sur Raspberry Pi
# Corrige les permissions de scheduling temps-r√©el pour Sp3ctra

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
AUDIO_USER="${AUDIO_USER:-sp3ctra}"
MAX_RT_PRIORITY=75
MAX_MEMLOCK=131072  # 128MB in KB
BACKUP_DIR="/etc/sp3ctra-backup-$(date +%Y%m%d-%H%M%S)"

echo -e "${CYAN}=========================================${NC}"
echo -e "${CYAN}  Sp3ctra Real-Time Audio Fix for Pi   ${NC}"
echo -e "${CYAN}=========================================${NC}"
echo ""

# Check if running as root
if [[ $EUID -ne 0 ]]; then
   echo -e "${RED}‚ùå Ce script doit √™tre ex√©cut√© en tant que root (sudo)${NC}"
   echo "Usage: sudo $0"
   exit 1
fi

# Check if user exists
if ! id "$AUDIO_USER" &>/dev/null; then
    echo -e "${RED}‚ùå L'utilisateur '$AUDIO_USER' n'existe pas${NC}"
    echo "Cr√©ez d'abord l'utilisateur ou d√©finissez AUDIO_USER="
    exit 1
fi

echo -e "${BLUE}üîß Configuration utilisateur: ${YELLOW}$AUDIO_USER${NC}"
echo -e "${BLUE}üéØ Priorit√© RT maximale: ${YELLOW}$MAX_RT_PRIORITY${NC}"
echo -e "${BLUE}üíæ M√©moire verrouill√©e max: ${YELLOW}${MAX_MEMLOCK}KB${NC}"
echo ""

# Create backup directory
echo -e "${PURPLE}üìÅ Cr√©ation du r√©pertoire de sauvegarde...${NC}"
mkdir -p "$BACKUP_DIR"
echo -e "${GREEN}‚úÖ Sauvegarde dans: $BACKUP_DIR${NC}"
echo ""

# Function to backup file
backup_file() {
    local file="$1"
    if [[ -f "$file" ]]; then
        echo -e "${YELLOW}üíæ Sauvegarde de $file${NC}"
        cp "$file" "$BACKUP_DIR/"
    fi
}

# 1. Add user to audio group
echo -e "${BLUE}1Ô∏è‚É£  Configuration des groupes utilisateur${NC}"
echo "--------------------------------------------"

if groups "$AUDIO_USER" | grep -q '\baudio\b'; then
    echo -e "${GREEN}‚úÖ L'utilisateur $AUDIO_USER est d√©j√† dans le groupe audio${NC}"
else
    echo -e "${YELLOW}üîß Ajout de $AUDIO_USER au groupe audio...${NC}"
    usermod -a -G audio "$AUDIO_USER"
    echo -e "${GREEN}‚úÖ Utilisateur ajout√© au groupe audio${NC}"
fi

# Also add to other useful audio-related groups if they exist
for group in pulse pulse-access; do
    if getent group "$group" &>/dev/null; then
        if groups "$AUDIO_USER" | grep -q "\b$group\b"; then
            echo -e "${GREEN}‚úÖ L'utilisateur $AUDIO_USER est d√©j√† dans le groupe $group${NC}"
        else
            echo -e "${YELLOW}üîß Ajout de $AUDIO_USER au groupe $group...${NC}"
            usermod -a -G "$group" "$AUDIO_USER"
            echo -e "${GREEN}‚úÖ Utilisateur ajout√© au groupe $group${NC}"
        fi
    fi
done

echo ""

# 2. Configure /etc/security/limits.conf
echo -e "${BLUE}2Ô∏è‚É£  Configuration des limites de priorit√© (/etc/security/limits.conf)${NC}"
echo "------------------------------------------------------------------------"

backup_file "/etc/security/limits.conf"

# Check if our configuration already exists
if grep -q "# Sp3ctra Real-Time Audio Configuration" /etc/security/limits.conf; then
    echo -e "${YELLOW}üîÑ Configuration Sp3ctra trouv√©e, mise √† jour...${NC}"
    # Remove old configuration
    sed -i '/# Sp3ctra Real-Time Audio Configuration/,/# End Sp3ctra Configuration/d' /etc/security/limits.conf
fi

# Add new configuration
echo -e "${YELLOW}üîß Ajout de la configuration temps-r√©el...${NC}"
cat >> /etc/security/limits.conf << EOF

# Sp3ctra Real-Time Audio Configuration
# Added by fix_pi_realtime_audio.sh on $(date)
$AUDIO_USER    soft    rtprio          $MAX_RT_PRIORITY
$AUDIO_USER    hard    rtprio          $MAX_RT_PRIORITY
$AUDIO_USER    soft    memlock         $MAX_MEMLOCK
$AUDIO_USER    hard    memlock         $MAX_MEMLOCK
$AUDIO_USER    soft    nice            -19
$AUDIO_USER    hard    nice            -19
# End Sp3ctra Configuration
EOF

echo -e "${GREEN}‚úÖ Configuration des limites mise √† jour${NC}"
echo ""

# 3. Configure systemd for real-time scheduling
echo -e "${BLUE}3Ô∏è‚É£  Configuration systemd (/etc/systemd/system.conf)${NC}"
echo "--------------------------------------------------------"

backup_file "/etc/systemd/system.conf"

# Function to update or add systemd configuration
update_systemd_config() {
    local key="$1"
    local value="$2"
    local file="/etc/systemd/system.conf"
    
    if grep -q "^#*${key}=" "$file"; then
        # Parameter exists (commented or not), update it
        sed -i "s/^#*${key}=.*/${key}=${value}/" "$file"
        echo -e "${YELLOW}üîÑ Mis √† jour: ${key}=${value}${NC}"
    else
        # Parameter doesn't exist, add it
        echo "${key}=${value}" >> "$file"
        echo -e "${YELLOW}‚ûï Ajout√©: ${key}=${value}${NC}"
    fi
}

echo -e "${YELLOW}üîß Configuration des param√®tres systemd temps-r√©el...${NC}"

# Add comment header if not exists
if ! grep -q "# Sp3ctra Real-Time Configuration" /etc/systemd/system.conf; then
    cat >> /etc/systemd/system.conf << EOF

# Sp3ctra Real-Time Configuration
# Added by fix_pi_realtime_audio.sh on $(date)
EOF
fi

# Configure systemd parameters for better real-time performance
update_systemd_config "DefaultLimitRTPRIO" "$MAX_RT_PRIORITY"
update_systemd_config "DefaultLimitMEMLOCK" "$MAX_MEMLOCK"
update_systemd_config "DefaultLimitNICE" "-19"

echo -e "${GREEN}‚úÖ Configuration systemd mise √† jour${NC}"
echo ""

# 4. Configure ALSA for low-latency (optional)
echo -e "${BLUE}4Ô∏è‚É£  Configuration ALSA (optionnelle)${NC}"
echo "--------------------------------------"

ALSA_CONF="/etc/asound.conf"
if [[ ! -f "$ALSA_CONF" ]]; then
    echo -e "${YELLOW}üîß Cr√©ation de la configuration ALSA optimis√©e...${NC}"
    cat > "$ALSA_CONF" << 'EOF'
# ALSA configuration for low-latency audio
# Created by fix_pi_realtime_audio.sh

# Default PCM device with low-latency settings
pcm.!default {
    type hw
    card 0
    device 0
    period_time 4166  # ~200 frames at 48kHz
    buffer_time 8333  # ~400 frames at 48kHz
}

# Control interface
ctl.!default {
    type hw
    card 0
}
EOF
    echo -e "${GREEN}‚úÖ Configuration ALSA cr√©√©e${NC}"
else
    echo -e "${GREEN}‚úÖ Configuration ALSA existante conserv√©e${NC}"
fi
echo ""

# 5. Kernel parameter optimization
echo -e "${BLUE}5Ô∏è‚É£  Optimisation des param√®tres noyau${NC}"
echo "----------------------------------------"

# Check and configure /etc/sysctl.conf
SYSCTL_CONF="/etc/sysctl.conf"
backup_file "$SYSCTL_CONF"

echo -e "${YELLOW}üîß Configuration des param√®tres noyau pour l'audio temps-r√©el...${NC}"

# Add kernel parameters for better audio performance
if ! grep -q "# Sp3ctra Audio Optimization" "$SYSCTL_CONF"; then
    cat >> "$SYSCTL_CONF" << 'EOF'

# Sp3ctra Audio Optimization
# Added by fix_pi_realtime_audio.sh
vm.swappiness=10
kernel.sched_rt_runtime_us=-1
kernel.sched_rt_period_us=1000000
EOF
    echo -e "${GREEN}‚úÖ Param√®tres noyau ajout√©s${NC}"
else
    echo -e "${GREEN}‚úÖ Param√®tres noyau d√©j√† configur√©s${NC}"
fi
echo ""

# 6. Create validation script
echo -e "${BLUE}6Ô∏è‚É£  Cr√©ation du script de validation${NC}"
echo "------------------------------------"

VALIDATION_SCRIPT="/usr/local/bin/sp3ctra-audio-test"
echo -e "${YELLOW}üîß Cr√©ation du script de test audio...${NC}"

cat > "$VALIDATION_SCRIPT" << 'EOF'
#!/bin/bash
# sp3ctra-audio-test
# Script de validation des permissions audio temps-r√©el pour Sp3ctra

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

USER="${USER:-$LOGNAME}"

echo -e "${BLUE}üß™ Test des permissions audio temps-r√©el pour $USER${NC}"
echo "=================================================="
echo ""

# Test 1: Group membership
echo -e "${BLUE}1Ô∏è‚É£  Test d'appartenance aux groupes${NC}"
if groups "$USER" | grep -q '\baudio\b'; then
    echo -e "${GREEN}‚úÖ Membre du groupe audio${NC}"
else
    echo -e "${RED}‚ùå PAS membre du groupe audio${NC}"
    echo -e "${YELLOW}üí° Solution: sudo usermod -a -G audio $USER${NC}"
fi

# Test 2: RT Priority limits
echo -e "${BLUE}2Ô∏è‚É£  Test des limites de priorit√© temps-r√©el${NC}"
RT_LIMIT=$(ulimit -r)
if [[ "$RT_LIMIT" != "unlimited" ]] && [[ "$RT_LIMIT" -ge 70 ]]; then
    echo -e "${GREEN}‚úÖ Limite RT Priority: $RT_LIMIT${NC}"
elif [[ "$RT_LIMIT" == "unlimited" ]]; then
    echo -e "${GREEN}‚úÖ Limite RT Priority: illimit√©e${NC}"
else
    echo -e "${RED}‚ùå Limite RT Priority insuffisante: $RT_LIMIT${NC}"
    echo -e "${YELLOW}üí° Requis: >= 70${NC}"
fi

# Test 3: Memory lock limits
echo -e "${BLUE}3Ô∏è‚É£  Test des limites de m√©moire verrouill√©e${NC}"
MEMLOCK_LIMIT=$(ulimit -l)
if [[ "$MEMLOCK_LIMIT" != "unlimited" ]] && [[ "$MEMLOCK_LIMIT" -ge 131072 ]]; then
    echo -e "${GREEN}‚úÖ Limite m√©moire verrouill√©e: ${MEMLOCK_LIMIT}KB${NC}"
elif [[ "$MEMLOCK_LIMIT" == "unlimited" ]]; then
    echo -e "${GREEN}‚úÖ Limite m√©moire verrouill√©e: illimit√©e${NC}"
else
    echo -e "${RED}‚ùå Limite m√©moire verrouill√©e insuffisante: ${MEMLOCK_LIMIT}KB${NC}"
    echo -e "${YELLOW}üí° Requis: >= 131072KB${NC}"
fi

# Test 4: Nice priority
echo -e "${BLUE}4Ô∏è‚É£  Test des priorit√©s nice${NC}"
NICE_LIMIT=$(ulimit -e)
if [[ "$NICE_LIMIT" -le 19 ]]; then
    echo -e "${GREEN}‚úÖ Limite nice: $NICE_LIMIT${NC}"
else
    echo -e "${RED}‚ùå Limite nice insuffisante: $NICE_LIMIT${NC}"
    echo -e "${YELLOW}üí° Requis: <= 19 (id√©alement -19)${NC}"
fi

echo ""

# Test 5: Practical RT test
echo -e "${BLUE}5Ô∏è‚É£  Test pratique de scheduling temps-r√©el${NC}"
if command -v chrt >/dev/null 2>&1; then
    if chrt -f 50 true 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Scheduling FIFO (priorit√© 50) : OK${NC}"
        
        # Test higher priority like Sp3ctra uses
        if chrt -f 70 true 2>/dev/null; then
            echo -e "${GREEN}‚úÖ Scheduling FIFO (priorit√© 70) : OK${NC}"
            echo -e "${GREEN}üéØ Sp3ctra devrait fonctionner correctement !${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Scheduling FIFO (priorit√© 70) : √âCHEC${NC}"
            echo -e "${YELLOW}üí° Sp3ctra utilisera une priorit√© plus faible${NC}"
        fi
    else
        echo -e "${RED}‚ùå Scheduling temps-r√©el indisponible${NC}"
        echo -e "${YELLOW}üí° V√©rifiez la configuration des limites${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Commande 'chrt' non disponible pour le test${NC}"
fi

echo ""

# Summary
echo -e "${BLUE}üìä R√âSUM√â${NC}"
echo "----------"
if groups "$USER" | grep -q '\baudio\b' && [[ "$RT_LIMIT" != "0" ]] && [[ "$RT_LIMIT" != "1" ]]; then
    echo -e "${GREEN}‚úÖ Configuration probablement correcte${NC}"
    echo -e "${GREEN}üöÄ Red√©marrez votre session pour appliquer les changements${NC}"
    echo -e "${BLUE}üí° Testez Sp3ctra : il devrait afficher 'running realtime scheduling'${NC}"
else
    echo -e "${RED}‚ùå Configuration n√©cessite des ajustements${NC}"
    echo -e "${YELLOW}üí° Relancez le script fix_pi_realtime_audio.sh${NC}"
fi

echo ""
echo -e "${BLUE}üîç Pour plus d'infos : journalctl -f pendant le lancement de Sp3ctra${NC}"
EOF

chmod +x "$VALIDATION_SCRIPT"
echo -e "${GREEN}‚úÖ Script de validation cr√©√©: $VALIDATION_SCRIPT${NC}"
echo ""

# 7. Final diagnostics and recommendations
echo -e "${BLUE}7Ô∏è‚É£  Diagnostic final et recommandations${NC}"
echo "----------------------------------------"

echo -e "${PURPLE}üìã R√âSUM√â DES MODIFICATIONS :${NC}"
echo "‚Ä¢ Utilisateur $AUDIO_USER ajout√© au groupe audio"
echo "‚Ä¢ Limites RT configur√©es dans /etc/security/limits.conf"
echo "‚Ä¢ Param√®tres systemd optimis√©s dans /etc/systemd/system.conf" 
echo "‚Ä¢ Configuration ALSA cr√©√©e/v√©rifi√©e"
echo "‚Ä¢ Param√®tres noyau optimis√©s dans /etc/sysctl.conf"
echo "‚Ä¢ Script de validation install√© : $VALIDATION_SCRIPT"
echo ""

echo -e "${YELLOW}‚ö†Ô∏è  ACTIONS REQUISES :${NC}"
echo "1. ${BLUE}Red√©marrez le syst√®me${NC} pour appliquer tous les changements :"
echo "   sudo reboot"
echo ""
echo "2. ${BLUE}Apr√®s red√©marrage${NC}, connectez-vous comme $AUDIO_USER et testez :"
echo "   $VALIDATION_SCRIPT"
echo ""
echo "3. ${BLUE}Lancez Sp3ctra${NC} et v√©rifiez le message :"
echo "   './build/Sp3ctra' | grep -i 'realtime'"
echo "   ${GREEN}Succ√®s${NC} : pas de message '_NOT_'"
echo "   ${RED}√âchec${NC} : message 'RtAudio alsa: _NOT_ running realtime scheduling'"
echo ""

echo -e "${GREEN}üéØ OBJECTIF ATTEINT :${NC}"
echo "‚Ä¢ Priorit√© r√©duite de 90 ‚Üí 70 dans le code (plus compatible)"
echo "‚Ä¢ Permissions syst√®me configur√©es pour supporter priorit√© 75"
echo "‚Ä¢ Latence audio consid√©rablement r√©duite attendue"
echo ""

echo -e "${PURPLE}üíæ Sauvegardes cr√©√©es dans : $BACKUP_DIR${NC}"
echo -e "${PURPLE}üîß Pour annuler les changements, restaurez depuis cette sauvegarde${NC}"
echo ""

echo -e "${CYAN}=========================================${NC}"
echo -e "${CYAN}     Configuration termin√©e avec succ√®s  ${NC}"
echo -e "${CYAN}=========================================${NC}"
